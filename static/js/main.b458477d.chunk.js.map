{"version":3,"sources":["App.js","index.js"],"names":["App","useState","calc","setCalc","result","setResult","ops","updateCalc","value","includes","slice","eval","toString","createDigits","digits","i","push","onClick","calculate","deleteLast","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2sBAEA,SAASA,MAER,cAAwBC,oDAAS,IAAjC,4LAAOC,KAAP,cAAaC,QAAb,cACA,WAA4BF,oDAAS,IAArC,6LAAOG,OAAP,cAAeC,UAAf,cAEMC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAG3BC,WAAa,SAAbA,WAAcC,OAEfF,IAAIG,SAASD,QAAmB,KAATN,MAE1BI,IAAIG,SAASD,QAAUF,IAAIG,SAASP,KAAKQ,OAAO,MAIjDP,QAAQD,KAAOM,OAEVF,IAAIG,SAASD,QACjBH,UAAUM,KAAKT,KAAOM,OAAOI,cAIzBC,aAAe,WAEpB,IADA,IAAMC,EAAS,GADW,WAEjBC,GACRD,EAAOE,KAEN,qEAAQC,QAAS,kBAAMV,WAAWQ,EAAEH,aAApC,SAA0DG,GAAJA,KAH/CA,EAAI,EAAGA,EAAI,KAAMA,EAAI,EAArBA,GAMT,OAAOD,GAEFI,UAAY,SAAZA,YACLf,QAAQQ,KAAKT,MAAMU,aAEdO,WAAa,WAClB,GAAa,KAATjB,KAAJ,CAKC,IAAMM,EAAQN,KAAKQ,MAAM,GAAI,GAC7BP,QAAQK,KAGR,OACE,kEAAKY,UAAU,MAAf,SACF,mEAAKA,UAAU,aAAf,UACG,mEAAKA,UAAU,UAAf,UAEAhB,OAAS,kFAAQA,OAAR,OAA0B,GAFnC,IAEwCF,MAAQ,OAGlD,mEAAKkB,UAAU,YAAf,UACC,qEAAQH,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eACA,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eAEA,qEAAQU,QAASE,WAAjB,oBAGD,mEAAKC,UAAU,SAAf,UACEP,eACD,qEAAQI,QAAS,kBAAMV,WAAW,MAAlC,eACE,qEAAQU,QAAS,kBAAMV,WAAW,MAAlC,eAEF,qEAAQU,QAASC,UAAjB,uBAOUlB,2B,+BC7Ef,iEAMAqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b458477d.chunk.js","sourcesContent":["import { useState } from 'react';\n\nfunction App() {\n\n\tconst [calc, setCalc] = useState('');\n\tconst [result, setResult] = useState('');\n\n\tconst ops = ['/', '*', '+', '-', '.'];\n\n\t//each button represents a value \n\tconst updateCalc = (value) => {\n\t\t//if statement prevents multiple consecutive operators \n\t\tif (ops.includes(value) && calc === '' ||\n\t\t\t//ops.includes checks if value is an operator and then if the last value entered is also an operator\n\t\t\tops.includes(value) && ops.includes(calc.slice(-1)))\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tsetCalc(calc + value);\n\n\t\tif (!ops.includes(value)) {\n\t\t\tsetResult(eval(calc + value).toString());\n\t\t}\n\t}\n\n\tconst createDigits = () => {\n\t\tconst digits = [];\n\t\tfor (let i = 1; i < 10; ++i) {\n\t\t\tdigits.push(\n\t\t\t\t// digit value needs to be string  \n\t\t\t\t<button onClick={() => updateCalc(i.toString())} key={i}>{i}</button>\n\t\t\t)\n\t\t}\n\t\treturn digits;\n\t}\n\tconst calculate = () => {\n\t\tsetCalc(eval(calc).toString());\n\t}\n\tconst deleteLast = () => {\n\t\tif (calc === '') {\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\t//remove last value via the slice\n\t\t\tconst value = calc.slice(0, -1);\n\t\t\tsetCalc(value);\n\t\t}\n\t}\n  \treturn (\n    \t<div className=\"App\">\n\t\t\t<div className=\"calculator\">\n\t\t\t  \t<div className=\"display\">\n\t\t\t\t  {/* if there is a value, display it, otherwise show nothing */}\n\t\t\t\t\t{result ? <span>({result})</span> : ''} {calc || \"0\"}\n\t\t\t\t</div>\n\t\t\t\n\t\t\t\t<div className=\"operators\">\n\t\t\t\t\t<button onClick={() => updateCalc('/')}>/</button>\n\t\t\t\t\t<button onClick={() => updateCalc('*')}>*</button>\n\t\t\t\t\t<button onClick={() => updateCalc('+')}>+</button>\n\t\t\t\t\t<button onClick={() => updateCalc('-')}>-</button>\n\n\t\t\t\t\t<button onClick={deleteLast}>DEL</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"digits\">\n\t\t\t\t\t{createDigits()}\n\t\t\t\t\t<button onClick={() => updateCalc('0')}>0</button>\n\t\t\t\t  \t<button onClick={() => updateCalc('.')}>.</button>\n\t\t\t\t  \n\t\t\t\t\t<button onClick={calculate}>=</button>\n\t\t\t\t</div>\n\t\t\t</div>\n    \t</div>\n  \t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}